if game:GetService("CoreGui"):FindFirstChild("NotificationArea") then  
    game:GetService("CoreGui"):FindFirstChild("NotificationArea"):Destroy()
end

local NotificationModule = {}
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")

local AccentColor = Color3.fromRGB(75, 10, 120)  -- Accent color
local MainColor = Color3.fromRGB(28, 28, 28)  -- Dark background color
local OutlineColor = Color3.fromRGB(50, 50, 50)  -- Outline color

local ActiveNotifications = {} -- Stores active notifications

-- Function to create UI elements
local function Create(Class, Properties)
    local _Instance = Instance.new(Class)
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance
end

-- Function to calculate text size
local function GetTextBounds(Text, Font, Size, Resolution)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
    return Bounds.X, Bounds.Y
end

-- Create Notification UI Elements
local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0.5, -200, 0, 370), -- Centered on screen
    Size = UDim2.new(0, 400, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    Parent = NotificationContainer,
})

-- Notification Function
function NotificationModule:Notify(Text, Color, Time)
    -- If the notification already exists, flash it
    if ActiveNotifications[Text] then
        local NotifyOuter = ActiveNotifications[Text]

        -- Flash effect (Purple)
        task.spawn(function()
            local originalColor = NotifyOuter.BackgroundColor3
            for i = 1, 3 do
                NotifyOuter.BackgroundColor3 = Color3.fromRGB(128, 0, 128) -- Purple
                task.wait(0.2)
                NotifyOuter.BackgroundColor3 = originalColor
                task.wait(0.2)
            end
        end)
        return -- Prevent duplicate notifications
    end

    -- Create new notification
    local TextSize = 17
    local XSize, YSize = GetTextBounds(Text, Enum.Font.GothamBold, TextSize)
    YSize = YSize + 10

    local NotifyOuter = Create("Frame", {
        BackgroundColor3 = MainColor, -- Ensure it's visible
        BorderColor3 = OutlineColor,
        BorderSizePixel = 1,
        Size = UDim2.new(0, XSize + 24, 0, YSize),
        ClipsDescendants = true,
        ZIndex = 100,
        Parent = NotificationContainer,
    })

    local TextLabel = Create("TextLabel", {
        BackgroundTransparency = 1, -- No blocking layers
        Position = UDim2.new(0, 8, 0, 0),
        Size = UDim2.new(1, -8, 1, 0),
        Text = Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.GothamBold,
        TextSize = TextSize,
        TextColor3 = Color3.new(1, 1, 1),
        ZIndex = 101,
        Parent = NotifyOuter,
    })

    Create("Frame", {
        BackgroundColor3 = Color or AccentColor,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 3, 1, 0),
        ZIndex = 102,
        Parent = NotifyOuter,
    })

    -- Animate the notification
    NotifyOuter.Size = UDim2.new(0, 0, 0, YSize)
    NotifyOuter:TweenSize(UDim2.new(0, XSize + 24, 0, YSize), "Out", "Quad", 0.4, true)

    -- Store the active notification
    ActiveNotifications[Text] = NotifyOuter

    -- Destroy notification after time
    task.spawn(function()
        wait(Time or 5)
        if ActiveNotifications[Text] then
            NotifyOuter:TweenSize(UDim2.new(0, 0, 0, YSize), "Out", "Quad", 0.4, true)
            wait(0.4)
            NotifyOuter:Destroy()
            ActiveNotifications[Text] = nil
        end
    end)
end

return NotificationModule
