-- Prevent multiple executions but allow reuse
if _G.__GUI_LoggerNotifier then
    return _G.__GUI_LoggerNotifier
end

-- Services
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")

-- Clean up old GUIs
if CoreGui:FindFirstChild("LoggerGUI") then CoreGui.LoggerGUI:Destroy() end
if CoreGui:FindFirstChild("NotificationArea") then CoreGui.NotificationArea:Destroy() end

-- Helper function
local function Create(Class, Properties)
    local inst = Instance.new(Class)
    for prop, val in pairs(Properties) do
        inst[prop] = val
    end
    return inst
end

-- Logger Module
local Logger = {}
local ScreenGui = Create("ScreenGui", {
    Name = "LoggerGUI",
    ResetOnSpawn = false,
    Parent = CoreGui,
    Enabled = false,
})

local Frame = Create("Frame", {
    Size = UDim2.new(0, 300, 0, 200),
    Position = UDim2.new(1, -310, 1, -210),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.2,
    Name = "LoggerFrame",
    Parent = ScreenGui,
})

local Header = Create("TextButton", {
    Size = UDim2.new(1, 0, 0, 24),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "▼ Logger (Click to Minimize)",
    Font = Enum.Font.SourceSansBold,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    AutoButtonColor = false,
    Parent = Frame,
})

local ScrollingFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -6, 1, -30),
    Position = UDim2.new(0, 0, 0, 24),
    CanvasSize = UDim2.new(0, 0, 10, 0),
    ScrollBarThickness = 6,
    BackgroundTransparency = 1,
    Name = "LogScroll",
    Parent = Frame,
})

local UIListLayout = Create("UIListLayout", {
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = ScrollingFrame,
})

local ResizeHandle = Create("TextButton", {
    Size = UDim2.new(0, 16, 0, 16),
    Position = UDim2.new(1, -16, 1, -16),
    BackgroundTransparency = 1,
    Text = "◢",
    TextColor3 = Color3.fromRGB(150, 150, 150),
    Font = Enum.Font.SourceSansBold,
    TextSize = 14,
    ZIndex = 10,
    Name = "ResizeHandle",
    Parent = Frame,
})

-- Resize logic
local resizing = false
local dragStart, startSize
ResizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = true
        dragStart = input.Position
        startSize = Frame.Size
    end
end)

ResizeHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        local newWidth = math.max(200, startSize.X.Offset + delta.X)
        local newHeight = math.max(100, startSize.Y.Offset + delta.Y)
        Frame.Size = UDim2.new(0, newWidth, 0, newHeight)
    end
end)

-- Drag logic
local dragging, dragOffset, clicked, clickTime = false, nil, false, 0
Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        clicked = true
        clickTime = tick()
        dragOffset = input.Position - Frame.AbsolutePosition
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        clicked = false
        local newPos = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
        Frame.Position = newPos
    end
end)

-- Logger functions
local logEntries = {}

function Logger.Log(richText, color)
    local label = Create("TextLabel", {
        Size = UDim2.new(1, -10, 0, 20),
        BackgroundTransparency = 1,
        Text = richText,
        TextColor3 = color or Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        RichText = true,
        Parent = ScrollingFrame,
    })

    table.insert(logEntries, label)
    task.wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function Logger.Clear()
    for _, label in ipairs(logEntries) do
        label:Destroy()
    end
    logEntries = {}
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function Logger.Show(state)
    ScreenGui.Enabled = state
end

-- Minimize toggle
local isMinimized = false
Header.MouseButton1Up:Connect(function()
    if clicked and (tick() - clickTime < 0.2) then
        isMinimized = not isMinimized
        Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
        ScrollingFrame.Visible = not isMinimized
    end
    clicked = false
end)

-- Notification Module
local NotificationModule = {}
local ActiveNotifications = {}
local NotificationTimers = {}

local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 370),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea,
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

function NotificationModule:Notify(richText, color, duration)
    if ActiveNotifications[richText] then
        local frame = ActiveNotifications[richText]
        local bar = frame:FindFirstChild("AccentBar")
        local label = frame:FindFirstChildOfClass("TextLabel")

        if not bar:FindFirstChild("Flashing") then
            local flashing = Instance.new("BoolValue")
            flashing.Name = "Flashing"
            flashing.Parent = bar

            task.spawn(function()
                local orig = bar.BackgroundColor3
                for _ = 1, 3 do
                    bar.BackgroundColor3 = Color3.new(1, 1, 1)
                    label.TextColor3 = Color3.new(1, 1, 1)
                    task.wait(0.2)
                    bar.BackgroundColor3 = orig
                    label.TextColor3 = Color3.new(1, 1, 1)
                    task.wait(0.2)
                end
                flashing:Destroy()
            end)
        end

        if NotificationTimers[richText] then
            task.cancel(NotificationTimers[richText])
        end

        NotificationTimers[richText] = task.spawn(function()
            task.wait(duration or 5)
            frame:TweenSize(UDim2.new(0, 0, 0, frame.Size.Y.Offset), "Out", "Quad", 0.4, true)
            task.wait(0.4)
            frame:Destroy()
            ActiveNotifications[richText] = nil
            NotificationTimers[richText] = nil
        end)
        return
    end

    local textSize = 17
    local bounds = TextService:GetTextSize(richText:gsub("<[^>]->", ""), textSize, Enum.Font.GothamBold, Vector2.new(1920, 1080))
    local xSize, ySize = bounds.X, bounds.Y + 10

    local frame = Create("Frame", {
        BackgroundColor3 = MainColor,
        BorderColor3 = OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Position = UDim2.new(0.5, -xSize / 2, 0, 10),
        Size = UDim2.new(0, 0, 0, ySize),
        ClipsDescendants = true,
        ZIndex = 101,
        Parent = NotificationContainer,
    })

    local label = Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, 0),
        Size = UDim2.new(1, -6, 1, 0),
        Text = richText,
        Font = Enum.Font.GothamBold,
        TextSize = textSize,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true,
        TextWrapped = true,
        ZIndex = 102,
        Parent = frame,
    })

    Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = color or AccentColor,
        Size = UDim2.new(0, 3, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 103,
        Parent = frame,
    })

    frame:TweenSize(UDim2.new(0, xSize + 20, 0, ySize), "Out", "Quad", 0.4, true)
    ActiveNotifications[richText] = frame

    NotificationTimers[richText] = task.spawn(function()
        task.wait(duration or 5)
        frame:TweenSize(UDim2.new(0, 0, 0, ySize), "Out", "Quad", 0.4, true)
        task.wait(0.4)
        frame:Destroy()
        ActiveNotifications[richText] = nil
        NotificationTimers[richText] = nil
    end)
end

-- Return combined module
local GUI = {
    Logger = Logger,
    Notifier = NotificationModule,
}

_G.__GUI_LoggerNotifier = GUI
return GUI
