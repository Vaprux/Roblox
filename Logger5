-- Logger GUI Module (Protected)
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

-- Prevent multiple initializations
if _G.__LOGGER_GUI_LOADED then
	return _G.__LOGGER_INSTANCE
end
_G.__LOGGER_GUI_LOADED = true

-- Cleanup previous GUI if it exists
if CoreGui:FindFirstChild("LoggerGUI") then
	CoreGui.LoggerGUI:Destroy()
end

local Logger = {}

-- Color code conversion (Minecraft § syntax)
local MinecraftColors = {
	["0"] = "rgb(0,0,0)",       ["1"] = "rgb(0,0,170)",
	["2"] = "rgb(0,170,0)",     ["3"] = "rgb(0,170,170)",
	["4"] = "rgb(170,0,0)",     ["5"] = "rgb(170,0,170)",
	["6"] = "rgb(255,170,0)",   ["7"] = "rgb(170,170,170)",
	["8"] = "rgb(85,85,85)",    ["9"] = "rgb(85,85,255)",
	["a"] = "rgb(85,255,85)",   ["b"] = "rgb(85,255,255)",
	["c"] = "rgb(255,85,85)",   ["d"] = "rgb(255,85,255)",
	["e"] = "rgb(255,255,85)",  ["f"] = "rgb(255,255,255)",
}

local function ConvertMinecraftColors(text)
	local output = ""
	local i = 1
	local currentColor = nil

	while i <= #text do
		local char = text:sub(i, i)
		if char == "§" and i < #text then
			local code = text:sub(i + 1, i + 1):lower()
			local color = MinecraftColors[code]
			if color then
				if currentColor then
					output = output .. "</font>"
				end
				output = output .. string.format('<font color="%s">', color)
				currentColor = color
			end
			i = i + 2
		else
			output = output .. char
			i = i + 1
		end
	end

	if currentColor then
		output = output .. "</font>"
	end

	return output
end

-- GUI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "LoggerGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = CoreGui
ScreenGui.Enabled = false

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 200)
Frame.Position = UDim2.new(1, -310, 1, -210)
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.BorderSizePixel = 0
Frame.BackgroundTransparency = 0.2
Frame.Name = "LoggerFrame"
Frame.Parent = ScreenGui

local Header = Instance.new("TextButton")
Header.Size = UDim2.new(1, 0, 0, 24)
Header.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Header.Text = "▼ Logger (Click to Minimize)"
Header.Font = Enum.Font.SourceSansBold
Header.TextSize = 16
Header.TextColor3 = Color3.new(1, 1, 1)
Header.BorderSizePixel = 0
Header.AutoButtonColor = false
Header.Parent = Frame

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Size = UDim2.new(1, -6, 1, -30)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 24)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 10, 0)
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Name = "LogScroll"
ScrollingFrame.Parent = Frame

local UIListLayout = Instance.new("UIListLayout", ScrollingFrame)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

local ResizeHandle = Instance.new("TextButton")
ResizeHandle.Size = UDim2.new(0, 16, 0, 16)
ResizeHandle.Position = UDim2.new(1, -16, 1, -16)
ResizeHandle.BackgroundTransparency = 1
ResizeHandle.Text = "◢"
ResizeHandle.TextColor3 = Color3.fromRGB(150, 150, 150)
ResizeHandle.Font = Enum.Font.SourceSansBold
ResizeHandle.TextSize = 14
ResizeHandle.ZIndex = 10
ResizeHandle.Name = "ResizeHandle"
ResizeHandle.Parent = Frame

-- Resize logic
local resizing = false
local dragStart, startSize

local function beginResize(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		resizing = true
		dragStart = input.Position
		startSize = Frame.Size
	end
end

local function endResize(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		resizing = false
	end
end

UserInputService.InputChanged:Connect(function(input)
	if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		local newWidth = math.max(200, startSize.X.Offset + delta.X)
		local newHeight = math.max(100, startSize.Y.Offset + delta.Y)
		Frame.Size = UDim2.new(0, newWidth, 0, newHeight)
	end
end)

ResizeHandle.InputBegan:Connect(beginResize)
ResizeHandle.InputEnded:Connect(endResize)

-- Drag logic
local dragging = false
local dragOffset
local clicked = false
local clickTime = 0

Header.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		clicked = true
		clickTime = tick()
		dragOffset = Vector2.new(input.Position.X - Frame.AbsolutePosition.X, input.Position.Y - Frame.AbsolutePosition.Y)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		clicked = false
		local newPos = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
		Frame.Position = newPos
	end
end)

-- Logger functionality
local logEntries = {}

function Logger.Log(text)
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, -10, 0, 20)
	label.BackgroundTransparency = 1
	label.Text = ConvertMinecraftColors(text)
	label.RichText = true
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Font = Enum.Font.SourceSans
	label.TextSize = 16
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = ScrollingFrame

	table.insert(logEntries, label)
	task.wait()
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
	ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function Logger.Clear()
	for _, label in ipairs(logEntries) do
		label:Destroy()
	end
	logEntries = {}
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function Logger.Show(bool)
	ScreenGui.Enabled = bool
end

-- Minimize toggle
local isMinimized = false
Header.MouseButton1Up:Connect(function()
	if clicked and (tick() - clickTime < 0.2) then
		isMinimized = not isMinimized
		Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
		ScrollingFrame.Visible = not isMinimized
	end
	clicked = false
end)

_G.__LOGGER_INSTANCE = Logger
return Logger
