local LastNotificationTime = 0 -- Tracks the last notification timestamp

function NotificationModule:Notify(Text, Color, Time)
    local currentTime = os.clock()
    if currentTime - LastNotificationTime < 1 then
        return -- Prevent sending notification if cooldown hasn't passed
    end
    LastNotificationTime = currentTime -- Update the timestamp

    if ActiveNotifications[Text] then
        local NotifyFrame = ActiveNotifications[Text]
        local AccentBar = NotifyFrame:FindFirstChild("AccentBar")
        local TextLabel = NotifyFrame:FindFirstChildOfClass("TextLabel")
        
        task.spawn(function()
            local OriginalColor = AccentBar.BackgroundColor3
            for i = 1, 3 do
                AccentBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                wait(0.2)
                AccentBar.BackgroundColor3 = OriginalColor
                TextLabel.TextColor3 = Color3.new(1, 1, 1)
                wait(0.2)
            end
        end)
        
        if NotificationTimers[Text] then
            task.cancel(NotificationTimers[Text])
        end
        
        NotificationTimers[Text] = task.spawn(function()
            wait(Time or 5)
            NotifyFrame:TweenSize(UDim2.new(0, 0, 0, NotifyFrame.Size.Y.Offset), "Out", "Quad", 0.4, true)
            wait(0.4)
            NotifyFrame:Destroy()
            ActiveNotifications[Text] = nil
            NotificationTimers[Text] = nil
        end)
        
        return
    end
    
    local TextSize = 17
    local XSize, YSize = GetTextSize(Text or "", Enum.Font.GothamBold, TextSize)
    YSize = YSize + 10

    local NotifyFrame = Create("Frame", {
        BackgroundColor3 = MainColor,
        BorderColor3 = OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Position = UDim2.new(0.5, -XSize / 2, 0, 10),
        Size = UDim2.new(0, 0, 0, YSize),
        ClipsDescendants = true,
        ZIndex = 101,
        Parent = NotificationContainer,
    })
    
    local TextLabel = Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, 0),
        Size = UDim2.new(1, -6, 1, 0),
        Text = Text,
        Font = Enum.Font.GothamBold,
        TextSize = TextSize,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        Parent = NotifyFrame,
    })

    local AccentBar = Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = Color or AccentColor,
        Size = UDim2.new(0, 3, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 103,
        Parent = NotifyFrame,
    })

    NotifyFrame:TweenSize(UDim2.new(0, XSize + 14, 0, YSize), "Out", "Quad", 0.4, true)
    ActiveNotifications[Text] = NotifyFrame
    
    NotificationTimers[Text] = task.spawn(function()
        wait(Time or 5)
        NotifyFrame:TweenSize(UDim2.new(0, 0, 0, YSize), "Out", "Quad", 0.4, true)
        wait(0.4)
        NotifyFrame:Destroy()
        ActiveNotifications[Text] = nil
        NotificationTimers[Text] = nil
    end)
end
