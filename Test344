-- NotifyLogger Module (Combined Notification + Logger)
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")

if _G.__NOTIFYLOGGER_LOADED then
    return _G.__NOTIFYLOGGER_INSTANCE
end
_G.__NOTIFYLOGGER_LOADED = true

-- Clean previous UIs
if CoreGui:FindFirstChild("NotificationArea") then CoreGui.NotificationArea:Destroy() end
if CoreGui:FindFirstChild("LoggerGUI") then CoreGui.LoggerGUI:Destroy() end

local NotifyLogger = {}

-- GUI Colors
local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

-- === Utilities ===
local function Create(Class, Properties)
    local Inst = Instance.new(Class)
    for Prop, Val in pairs(Properties) do
        Inst[Prop] = Val
    end
    return Inst
end

-- === Notification System ===
local ActiveNotifications = {}
local NotificationTimers = {}

local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 370),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

local function StripTags(str)
    return string.gsub(str, "<[^>]->", "")
end

local function GetTextSize(Text, Font, Size)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Vector2.new(1920, 1080))
    return Bounds.X or 200, Bounds.Y or 50
end

-- === Logger System ===
local LoggerGUI = Create("ScreenGui", {
    Name = "LoggerGUI",
    Parent = CoreGui,
    ResetOnSpawn = false,
    Enabled = false
})

local LoggerFrame = Create("Frame", {
    Size = UDim2.new(0, 300, 0, 200),
    Position = UDim2.new(1, -310, 1, -210),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.2,
    Name = "LoggerFrame",
    Parent = LoggerGUI
})

local Header = Create("TextButton", {
    Size = UDim2.new(1, 0, 0, 24),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "▼ Logger (Click to Minimize)",
    Font = Enum.Font.SourceSansBold,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    AutoButtonColor = false,
    Parent = LoggerFrame
})

local ScrollingFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -6, 1, -30),
    Position = UDim2.new(0, 0, 0, 24),
    CanvasSize = UDim2.new(0, 0, 10, 0),
    ScrollBarThickness = 6,
    BackgroundTransparency = 1,
    Name = "LogScroll",
    Parent = LoggerFrame
})

local UIListLayout = Create("UIListLayout", {
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = ScrollingFrame
})

local ResizeHandle = Create("TextButton", {
    Size = UDim2.new(0, 16, 0, 16),
    Position = UDim2.new(1, -16, 1, -16),
    BackgroundTransparency = 1,
    Text = "◢",
    TextColor3 = Color3.fromRGB(150, 150, 150),
    Font = Enum.Font.SourceSansBold,
    TextSize = 14,
    ZIndex = 10,
    Name = "ResizeHandle",
    Parent = LoggerFrame
})

local resizing, dragStart, startSize = false, nil, nil

ResizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = true
        dragStart = input.Position
        startSize = LoggerFrame.Size
    end
end)

ResizeHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        local newWidth = math.max(200, startSize.X.Offset + delta.X)
        local newHeight = math.max(100, startSize.Y.Offset + delta.Y)
        LoggerFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
    end
end)

local dragging, dragOffset, clicked, clickTime = false, nil, false, 0

Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        clicked = true
        clickTime = tick()
        dragOffset = Vector2.new(input.Position.X - LoggerFrame.AbsolutePosition.X, input.Position.Y - LoggerFrame.AbsolutePosition.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        clicked = false
        local newPos = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
        LoggerFrame.Position = newPos
    end
end)

local logEntries = {}
local isMinimized = false

Header.MouseButton1Up:Connect(function()
    if clicked and (tick() - clickTime < 0.2) then
        isMinimized = not isMinimized
        Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
        ScrollingFrame.Visible = not isMinimized
    end
    clicked = false
end)

function NotifyLogger.Log(text)
    local LogButton = Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 20),
        BackgroundTransparency = 1,
        Text = StripTags(text),
        AutoButtonColor = false,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = false,
        Parent = ScrollingFrame
    })

    LogButton.MouseButton1Click:Connect(function()
        setclipboard(StripTags(text))
    end)

    table.insert(logEntries, LogButton)
    task.wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

return NotifyLogger
