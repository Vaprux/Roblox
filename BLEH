-- NotifyLogger Module (Notification + Logger + Command Bar)
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")

if _G.__NOTIFYLOGGER_LOADED then
    return _G.__NOTIFYLOGGER_INSTANCE
end
_G.__NOTIFYLOGGER_LOADED = true

if CoreGui:FindFirstChild("NotificationArea") then CoreGui.NotificationArea:Destroy() end
if CoreGui:FindFirstChild("LoggerGUI") then CoreGui.LoggerGUI:Destroy() end

local NotifyLogger = {}

local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

local function Create(Class, Properties)
    local Inst = Instance.new(Class)
    for Prop, Val in pairs(Properties) do
        Inst[Prop] = Val
    end
    return Inst
end

local function StripTags(str)
    return string.gsub(str, "<[^>]->", "")
end

local function GetTextSize(Text, Font, Size)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Vector2.new(1920, 1080))
    return Bounds.X or 200, Bounds.Y or 50
end

local ActiveNotifications = {}
local NotificationTimers = {}

local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 370),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

local LoggerGUI = Create("ScreenGui", {
    Name = "LoggerGUI",
    Parent = CoreGui,
    ResetOnSpawn = false,
    Enabled = false
})

local LoggerFrame = Create("Frame", {
    Size = UDim2.new(0, 300, 0, 200),
    Position = UDim2.new(1, -310, 1, -210),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.2,
    Name = "LoggerFrame",
    Parent = LoggerGUI
})

local Header = Create("TextButton", {
    Size = UDim2.new(1, 0, 0, 24),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "▼ Logger (Click to Minimize)",
    Font = Enum.Font.SourceSansBold,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    AutoButtonColor = false,
    Parent = LoggerFrame
})

local ScrollingFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -6, 1, -58),
    Position = UDim2.new(0, 0, 0, 24),
    CanvasSize = UDim2.new(0, 0, 10, 0),
    ScrollBarThickness = 6,
    BackgroundTransparency = 1,
    Name = "LogScroll",
    Parent = LoggerFrame
})

local UIListLayout = Create("UIListLayout", {
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = ScrollingFrame
})

local ResizeHandle = Create("TextButton", {
    Size = UDim2.new(0, 16, 0, 16),
    Position = UDim2.new(1, -16, 1, -16),
    BackgroundTransparency = 1,
    Text = "◢",
    TextColor3 = Color3.fromRGB(150, 150, 150),
    Font = Enum.Font.SourceSansBold,
    TextSize = 14,
    ZIndex = 10,
    Name = "ResizeHandle",
    Parent = LoggerFrame
})

local resizing, dragStart, startSize = false, nil, nil
ResizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = true
        dragStart = input.Position
        startSize = LoggerFrame.Size
    end
end)
ResizeHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = false
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        LoggerFrame.Size = UDim2.new(0, math.max(200, startSize.X.Offset + delta.X), 0, math.max(100, startSize.Y.Offset + delta.Y))
    end
end)

local dragging, dragOffset, clicked, clickTime = false, nil, false, 0
Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        clicked = true
        clickTime = tick()
        dragOffset = Vector2.new(input.Position.X - LoggerFrame.AbsolutePosition.X, input.Position.Y - LoggerFrame.AbsolutePosition.Y)
    end
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        clicked = false
        LoggerFrame.Position = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
    end
end)

local logEntries = {}
local isMinimized = false
Header.MouseButton1Up:Connect(function()
    if clicked and (tick() - clickTime < 0.2) then
        isMinimized = not isMinimized
        Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
        ScrollingFrame.Visible = not isMinimized
    end
    clicked = false
end)

function NotifyLogger.Log(text)
    local rawText = tostring(text)
    local label = Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 20),
        BackgroundTransparency = 1,
        Text = rawText,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true,
        AutoButtonColor = false,
        Parent = ScrollingFrame
    })
    label.MouseButton1Click:Connect(function()
        if setclipboard then
            setclipboard(StripTags(rawText))
            NotifyLogger.Notify("Copied to clipboard!", Color3.fromRGB(80, 200, 80), 2)
        else
            warn("Clipboard copy not supported on this executor.")
        end
    end)
    table.insert(logEntries, label)
    task.wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function NotifyLogger.Clear()
    for _, label in ipairs(logEntries) do
        label:Destroy()
    end
    logEntries = {}
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function NotifyLogger.Show(state)
    LoggerGUI.Enabled = state
end

function NotifyLogger.Notify(Text, Color, Time)
    if ActiveNotifications[Text] then
        local NotifyFrame = ActiveNotifications[Text]
        local AccentBar = NotifyFrame:FindFirstChild("AccentBar")
        local TextLabel = NotifyFrame:FindFirstChildOfClass("TextLabel")

        if not AccentBar:FindFirstChild("Flashing") then
            local FlashingIndicator = Instance.new("BoolValue")
            FlashingIndicator.Name = "Flashing"
            FlashingIndicator.Parent = AccentBar

            task.spawn(function()
                local OriginalColor = AccentBar.BackgroundColor3
                for i = 1, 3 do
                    AccentBar.BackgroundColor3 = Color3.new(1, 1, 1)
                    TextLabel.TextColor3 = Color3.new(1, 1, 1)
                    wait(0.2)
                    AccentBar.BackgroundColor3 = OriginalColor
                    TextLabel.TextColor3 = Color3.new(1, 1, 1)
                    wait(0.2)
                end
                FlashingIndicator:Destroy()
            end)
        end

        if NotificationTimers[Text] then
            task.cancel(NotificationTimers[Text])
        end

        NotificationTimers[Text] = task.spawn(function()
            wait(Time or 5)
            NotifyFrame:TweenSize(UDim2.new(0, 0, 0, NotifyFrame.Size.Y.Offset), "Out", "Quad", 0.4, true)
            wait(0.4)
            NotifyFrame:Destroy()
            ActiveNotifications[Text] = nil
            NotificationTimers[Text] = nil
        end)
        return
    end

    local CleanText = StripTags(Text or "")
    local TextSize = 17
    local XSize, YSize = GetTextSize(CleanText, Enum.Font.GothamBold, TextSize)
    YSize = YSize + 10

    local NotifyFrame = Create("Frame", {
        BackgroundColor3 = MainColor,
        BorderColor3 = OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Position = UDim2.new(0.5, -XSize / 2, 0, 10),
        Size = UDim2.new(0, 0, 0, YSize),
        ClipsDescendants = true,
        ZIndex = 101,
        Parent = NotificationContainer,
    })

    Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, 0),
        Size = UDim2.new(1, -6, 1, 0),
        Text = Text,
        Font = Enum.Font.GothamBold,
        TextSize = TextSize,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        RichText = true,
        Parent = NotifyFrame,
    })

    Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = Color or AccentColor,
        Size = UDim2.new(0, 3, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 103,
        Parent = NotifyFrame,
    })

    NotifyFrame:TweenSize(UDim2.new(0, XSize + 14, 0, YSize), "Out", "Quad", 0.4, true)
    ActiveNotifications[Text] = NotifyFrame

    NotificationTimers[Text] = task.spawn(function()
        wait(Time or 5)
        NotifyFrame:TweenSize(UDim2.new(0, 0, 0, YSize), "Out", "Quad", 0.4, true)
        wait(0.4)
        NotifyFrame:Destroy()
        ActiveNotifications[Text] = nil
        NotificationTimers[Text] = nil
    end)

    NotifyLogger.Log(Text)
end

-- === Command System ===
local CommandBar = Create("TextBox", {
    Size = UDim2.new(1, -6, 0, 24),
    Position = UDim2.new(0, 0, 1, -26),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BorderSizePixel = 0,
    ClearTextOnFocus = true,
    Text = "",
    TextColor3 = Color3.new(1, 1, 1),
    Font = Enum.Font.SourceSans,
    TextSize = 16,
    TextXAlignment = Enum.TextXAlignment.Left,
    PlaceholderText = "Enter command...",
    PlaceholderColor3 = Color3.fromRGB(160, 160, 160),
    Parent = LoggerFrame
})

local RegisteredCommands = {}

function NotifyLogger.AddCommand(name, callback)
    RegisteredCommands[name:lower()] = callback
end

CommandBar.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local input = CommandBar.Text
        CommandBar.Text = ""
        NotifyLogger.Log("> " .. input)

        local split = input:split(" ")
        local name = (split[1] or ""):lower()
        table.remove(split, 1)

        local commandFunc = RegisteredCommands[name]
        if commandFunc then
            local success, err = pcall(function()
                commandFunc(split)
            end)
            if not success then
                NotifyLogger.Notify("⚠️ Command error: " .. err, Color3.fromRGB(255, 80, 80), 4)
            end
        elseif name ~= "" then
            NotifyLogger.Notify("❓ Unknown command: " .. name, Color3.fromRGB(255, 150, 150), 3)
        end
    end
end)

-- === NEW STUFF ===
local colorMap = {
    Red = "#FF5555",
    Green = "#55FF55",
    Blue = "#5555FF",
    White = "#FFFFFF",
    Yellow = "#FFFF55",
    Cyan = "#55FFFF",
    Magenta = "#FF55FF",
    Gray = "#AAAAAA",
    Orange = "#FFA500",
    Purple = "#AA00FF",
}

function ColorText(colorName, text)
    local hex = colorMap[colorName] or "#FFFFFF"
    return string.format('<font color="%s">%s</font>', hex, text)
end

function QuickNotify(text, duration)
    NotifyLogger.Notify(text, nil, duration or 5)
end

_G.__NOTIFYLOGGER_INSTANCE = NotifyLogger
return NotifyLogger
