-- NotifyLogger Module (with Command Bar, Autocomplete, Drag & Resize Fixes)
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")

-- Prevent duplicates
if _G.__NOTIFYLOGGER_LOADED then return _G.__NOTIFYLOGGER_INSTANCE end
_G.__NOTIFYLOGGER_LOADED = true

-- Cleanup old UIs
for _, guiName in ipairs({"NotificationArea", "LoggerGUI"}) do
	local gui = CoreGui:FindFirstChild(guiName)
	if gui then gui:Destroy() end
end

local NotifyLogger = {}
local Commands = {}

-- UI utils
local function Create(class, props)
	local inst = Instance.new(class)
	for k, v in pairs(props) do inst[k] = v end
	return inst
end

local function StripTags(str)
	return string.gsub(str, "<[^>]->", "")
end

local function GetTextSize(text, font, size)
	local bounds = TextService:GetTextSize(text, size, font, Vector2.new(1920, 1080))
	return bounds.X or 200, bounds.Y or 50
end

-- === Notification GUI ===
local NotificationArea = Create("ScreenGui", {
	Name = "NotificationArea",
	Parent = CoreGui,
	IgnoreGuiInset = true
})
local NotificationContainer = Create("Frame", {
	Size = UDim2.new(1, 0, 1, -40),
	Position = UDim2.new(0, 0, 0, 370),
	BackgroundTransparency = 1,
	ZIndex = 100,
	Parent = NotificationArea
})
Create("UIListLayout", {
	Padding = UDim.new(0, 4),
	FillDirection = Enum.FillDirection.Vertical,
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = NotificationContainer
})

-- === Logger GUI ===
local LoggerGUI = Create("ScreenGui", {
	Name = "LoggerGUI",
	Parent = CoreGui,
	ResetOnSpawn = false,
	Enabled = true
})
local LoggerFrame = Create("Frame", {
	Size = UDim2.new(0, 300, 0, 220),
	Position = UDim2.new(1, -310, 1, -230),
	BackgroundColor3 = Color3.fromRGB(30, 30, 30),
	BackgroundTransparency = 0.2,
	BorderSizePixel = 0,
	Name = "LoggerFrame",
	Parent = LoggerGUI
})
local Header = Create("TextButton", {
	Size = UDim2.new(1, 0, 0, 24),
	Text = "▼ Logger (Click to Minimize)",
	BackgroundColor3 = Color3.fromRGB(40, 40, 40),
	TextColor3 = Color3.new(1,1,1),
	Font = Enum.Font.SourceSansBold,
	TextSize = 16,
	AutoButtonColor = false,
	BorderSizePixel = 0,
	Parent = LoggerFrame
})
local ScrollingFrame = Create("ScrollingFrame", {
	Size = UDim2.new(1, -6, 1, -70),
	Position = UDim2.new(0, 0, 0, 24),
	CanvasSize = UDim2.new(0, 0, 10, 0),
	ScrollBarThickness = 6,
	BackgroundTransparency = 1,
	Name = "LogScroll",
	Parent = LoggerFrame
})
local UIListLayout = Create("UIListLayout", {
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = ScrollingFrame
})
local ResizeHandle = Create("TextButton", {
	Size = UDim2.new(0, 16, 0, 16),
	Position = UDim2.new(1, -16, 1, -16),
	Text = "◢",
	TextColor3 = Color3.fromRGB(150,150,150),
	Font = Enum.Font.SourceSansBold,
	TextSize = 14,
	BackgroundTransparency = 1,
	ZIndex = 10,
	Parent = LoggerFrame
})

-- === Command Bar ===
local CommandBox = Create("TextBox", {
	Size = UDim2.new(1, -6, 0, 22),
	Position = UDim2.new(0, 3, 1, -24),
	PlaceholderText = "Enter command...",
	TextColor3 = Color3.new(1,1,1),
	Text = "",
	ClearTextOnFocus = false,
	Font = Enum.Font.SourceSans,
	TextSize = 16,
	BackgroundColor3 = Color3.fromRGB(20, 20, 20),
	BorderColor3 = Color3.fromRGB(50,50,50),
	ZIndex = 6,
	Parent = LoggerFrame
})

-- === Autocomplete Dropdown ===
local SuggestionFrame = Create("Frame", {
	Size = UDim2.new(1, -6, 0, 100),
	Position = UDim2.new(0, 3, 1, -126), -- Above the command bar
	BackgroundColor3 = Color3.fromRGB(25,25,25),
	BorderColor3 = Color3.fromRGB(50,50,50),
	Visible = false,
	ClipsDescendants = true,
	ZIndex = 5,
	Parent = LoggerFrame
})
local SuggestionList = Create("UIListLayout", {
	SortOrder = Enum.SortOrder.LayoutOrder,
	Padding = UDim.new(0, 2),
	Parent = SuggestionFrame
})

local function RefreshSuggestions(input)
	for _, child in ipairs(SuggestionFrame:GetChildren()) do
		if child:IsA("TextButton") then child:Destroy() end
	end

	local query = input:lower()
	local matches = {}
	for cmdName in pairs(Commands) do
		if cmdName:lower():sub(1, #query) == query and query ~= "" then
			table.insert(matches, cmdName)
		end
	end

	if #matches == 0 then
		SuggestionFrame.Visible = false
		return
	end

	for _, match in ipairs(matches) do
		local btn = Create("TextButton", {
			Text = match,
			TextColor3 = Color3.fromRGB(255,255,255),
			Font = Enum.Font.SourceSans,
			TextSize = 16,
			Size = UDim2.new(1, 0, 0, 22),
			BackgroundTransparency = 1,
			AutoButtonColor = false,
			ZIndex = 6,
			Parent = SuggestionFrame
		})
		btn.MouseButton1Click:Connect(function()
			CommandBox.Text = match
			CommandBox:CaptureFocus()
			SuggestionFrame.Visible = false
		end)
	end

	SuggestionFrame.Size = UDim2.new(1, -6, 0, #matches * 24)
	SuggestionFrame.Visible = true
end

CommandBox:GetPropertyChangedSignal("Text"):Connect(function()
	RefreshSuggestions(CommandBox.Text)
end)

CommandBox.FocusLost:Connect(function(enter)
	if enter then
		local input = CommandBox.Text:lower()
		local callback = Commands[input]
		if callback then callback() end
		CommandBox.Text = ""
		SuggestionFrame.Visible = false
	end
end)

-- === Drag & Resize ===
do
	local dragging, resizing = false, false
	local dragStart, dragOffset, startSize

	Header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			dragOffset = input.Position - LoggerFrame.AbsolutePosition
		end
	end)

	ResizeHandle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			resizing = true
			dragStart = input.Position
			startSize = LoggerFrame.AbsoluteSize
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
			resizing = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			LoggerFrame.Position = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
		elseif resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			LoggerFrame.Size = UDim2.new(0, math.max(200, startSize.X.Offset + delta.X), 0, math.max(100, startSize.Y.Offset + delta.Y))
		end
	end)
end

-- === Public API ===
function NotifyLogger.Log(text)
	local label = Create("TextButton", {
		Size = UDim2.new(1, -10, 0, 20),
		BackgroundTransparency = 1,
		Text = tostring(text),
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		TextXAlignment = Enum.TextXAlignment.Left,
		AutoButtonColor = false,
		Parent = ScrollingFrame
	})
	table.insert(NotifyLogger.Logs or {}, label)
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
	ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function NotifyLogger.Notify(text, color, duration)
	local CleanText = StripTags(text)
	local sizeX, sizeY = GetTextSize(CleanText, Enum.Font.GothamBold, 17)
	local NotifyFrame = Create("Frame", {
		BackgroundColor3 = Color3.fromRGB(25,25,25),
		Size = UDim2.new(0, 0, 0, sizeY + 10),
		Position = UDim2.new(0.5, -sizeX/2, 0, 10),
		ClipsDescendants = true,
		Parent = NotificationContainer,
		ZIndex = 101
	})
	Create("TextLabel", {
		Size = UDim2.new(1, -6, 1, 0),
		Position = UDim2.new(0, 6, 0, 0),
		Text = text,
		TextColor3 = Color3.new(1,1,1),
		Font = Enum.Font.GothamBold,
		TextSize = 17,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		RichText = true,
		ZIndex = 102,
		Parent = NotifyFrame
	})
	Create("Frame", {
		Size = UDim2.new(0, 3, 1, 0),
		Position = UDim2.new(0, 0, 0, 0),
		BackgroundColor3 = color or Color3.fromRGB(75,10,120),
		ZIndex = 103,
		Parent = NotifyFrame
	})
	NotifyFrame:TweenSize(UDim2.new(0, sizeX + 14, 0, sizeY + 10), "Out", "Quad", 0.3, true)
	task.delay(duration or 5, function()
		NotifyFrame:TweenSize(UDim2.new(0, 0, 0, sizeY + 10), "Out", "Quad", 0.3, true)
		task.wait(0.3)
		NotifyFrame:Destroy()
	end)

	NotifyLogger.Log(text)
end

function NotifyLogger.AddCommand(name, callback)
	Commands[name:lower()] = callback
end

function NotifyLogger.Clear()
	for _, label in ipairs(NotifyLogger.Logs or {}) do
		label:Destroy()
	end
	NotifyLogger.Logs = {}
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function NotifyLogger.Show(state)
	LoggerGUI.Enabled = state
end

_G.__NOTIFYLOGGER_INSTANCE = NotifyLogger
return NotifyLogger
