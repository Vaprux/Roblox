-- Notification Module (Protected)
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

-- Avoid multiple executions
if _G.__NOTIFY_GUI_LOADED then
	return _G.__NOTIFY_INSTANCE
end
_G.__NOTIFY_GUI_LOADED = true

-- Destroy previous GUI if not already loaded
if CoreGui:FindFirstChild("NotificationArea") then
	CoreGui.NotificationArea:Destroy()
end

local NotificationModule = {}

local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

local ActiveNotifications = {}
local NotificationTimers = {}

local function Create(Class, Properties)
	local obj = Instance.new(Class)
	for k, v in pairs(Properties) do
		obj[k] = v
	end
	return obj
end

-- Color Code Map (Minecraft § codes → HTML hex)
local ColorCodeMap = {
	["0"] = "#000000", -- Black
	["1"] = "#0000AA", -- Dark Blue
	["2"] = "#00AA00", -- Dark Green
	["3"] = "#00AAAA", -- Dark Aqua
	["4"] = "#AA0000", -- Dark Red
	["5"] = "#AA00AA", -- Dark Purple
	["6"] = "#FFAA00", -- Gold
	["7"] = "#AAAAAA", -- Gray
	["8"] = "#555555", -- Dark Gray
	["9"] = "#5555FF", -- Blue
	["a"] = "#55FF55", -- Green
	["b"] = "#55FFFF", -- Aqua
	["c"] = "#FF5555", -- Red
	["d"] = "#FF55FF", -- Light Purple
	["e"] = "#FFFF55", -- Yellow
	["f"] = "#FFFFFF", -- White
}

-- Converts Minecraft-style § codes to RichText <font> tags
local function ConvertColorCodesToRichText(text)
	local result = ""
	local i = 1
	local open = false

	while i <= #text do
		local char = text:sub(i, i)
		if char == "§" then
			local nextChar = text:sub(i + 1, i + 1):lower()
			local color = ColorCodeMap[nextChar]
			if color then
				if open then result ..= "</font>" end
				result ..= string.format('<font color="%s">', color)
				open = true
				i += 2
			else
				result ..= char
				i += 1
			end
		else
			result ..= char
			i += 1
		end
	end

	if open then result ..= "</font>" end
	return result
end

-- Strip RichText for text size calculations
local function StripRichTextTags(text)
	return text:gsub("<[^>]->", "")
end

-- Calculates text size using Roblox’s TextService
local function GetTextSize(Text, Font, Size)
	local bounds = TextService:GetTextSize(Text, Size, Font, Vector2.new(1920, 1080))
	return bounds.X or 200, bounds.Y or 50
end

-- GUI setup
local NotificationArea = Create("ScreenGui", {
	Name = "NotificationArea",
	Parent = CoreGui,
	IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
	BackgroundTransparency = 1,
	Position = UDim2.new(0, 0, 0, 370),
	Size = UDim2.new(1, 0, 1, -40),
	ZIndex = 100,
	Parent = NotificationArea
})

Create("UIListLayout", {
	Padding = UDim.new(0, 4),
	FillDirection = Enum.FillDirection.Vertical,
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = NotificationContainer
})

-- Main Notify function
function NotificationModule:Notify(text, color, duration)
	local convertedText = ConvertColorCodesToRichText(text)
	local cleanText = StripRichTextTags(convertedText)
	local textSize = 17

	-- Already exists? Flash it
	if ActiveNotifications[text] then
		local notifyFrame = ActiveNotifications[text]
		local accent = notifyFrame:FindFirstChild("AccentBar")
		local label = notifyFrame:FindFirstChildWhichIsA("TextLabel")

		if not accent:FindFirstChild("Flashing") then
			local tag = Instance.new("BoolValue")
			tag.Name = "Flashing"
			tag.Parent = accent

			task.spawn(function()
				local original = accent.BackgroundColor3
				for _ = 1, 3 do
					accent.BackgroundColor3 = Color3.new(1, 1, 1)
					label.TextColor3 = Color3.new(1, 1, 1)
					wait(0.2)
					accent.BackgroundColor3 = original
					label.TextColor3 = Color3.new(1, 1, 1)
					wait(0.2)
				end
				tag:Destroy()
			end)
		end

		if NotificationTimers[text] then
			task.cancel(NotificationTimers[text])
		end

		NotificationTimers[text] = task.spawn(function()
			wait(duration or 5)
			notifyFrame:TweenSize(UDim2.new(0, 0, 0, notifyFrame.Size.Y.Offset), "Out", "Quad", 0.4, true)
			wait(0.4)
			notifyFrame:Destroy()
			ActiveNotifications[text] = nil
			NotificationTimers[text] = nil
		end)

		return
	end

	local x, y = GetTextSize(cleanText, Enum.Font.GothamBold, textSize)
	y += 10

	local notifyFrame = Create("Frame", {
		BackgroundColor3 = MainColor,
		BorderColor3 = OutlineColor,
		BorderMode = Enum.BorderMode.Inset,
		Position = UDim2.new(0.5, -x / 2, 0, 10),
		Size = UDim2.new(0, 0, 0, y),
		ClipsDescendants = true,
		ZIndex = 101,
		Parent = NotificationContainer
	})

	Create("TextLabel", {
		Position = UDim2.new(0, 6, 0, 0),
		Size = UDim2.new(1, -6, 1, 0),
		Text = convertedText,
		Font = Enum.Font.GothamBold,
		TextSize = textSize,
		BackgroundTransparency = 1,
		TextColor3 = Color3.new(1, 1, 1),
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 102,
		RichText = true,
		Parent = notifyFrame
	})

	Create("Frame", {
		Name = "AccentBar",
		BackgroundColor3 = color or AccentColor,
		Size = UDim2.new(0, 3, 1, 0),
		Position = UDim2.new(0, 0, 0, 0),
		ZIndex = 103,
		Parent = notifyFrame
	})

	notifyFrame:TweenSize(UDim2.new(0, x + 14, 0, y), "Out", "Quad", 0.4, true)
	ActiveNotifications[text] = notifyFrame

	NotificationTimers[text] = task.spawn(function()
		wait(duration or 5)
		notifyFrame:TweenSize(UDim2.new(0, 0, 0, y), "Out", "Quad", 0.4, true)
		wait(0.4)
		notifyFrame:Destroy()
		ActiveNotifications[text] = nil
		NotificationTimers[text] = nil
	end)
end

_G.__NOTIFY_INSTANCE = NotificationModule
return NotificationModule
