--// Settings
local ESP = {
    Boxes = false,
    Names = false,
    Tracers = false,

    Enabled = false,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    TeamColor = false,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = false,
    Players = true,
    AutoRemove = true,

    Objects = setmetatable({}, { __mode = "kv" }),
    Overrides = {}
}

--// Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local WorldToViewportPoint = Camera.WorldToViewportPoint

--// Draw helper
local function Draw(obj, props)
    local d = Drawing.new(obj)
    for i, v in pairs(props or {}) do
        d[i] = v
    end
    return d
end

--// Team functions
function ESP:GetTeam(p)
    return self.Overrides.GetTeam and self.Overrides.GetTeam(p) or p and p.Team
end

function ESP:IsTeamMate(p)
    return self.Overrides.IsTeamMate and self.Overrides.IsTeamMate(p) or self:GetTeam(p) == self:GetTeam(Player)
end

function ESP:GetColor(obj)
    if self.Overrides.GetColor then return self.Overrides.GetColor(obj) end
    local p = self:GetPlrFromChar(obj)
    return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
end

function ESP:GetPlrFromChar(char)
    return self.Overrides.GetPlrFromChar and self.Overrides.GetPlrFromChar(char) or Players:GetPlayerFromCharacter(char)
end

--// Box base
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for _, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
    end
end

function boxBase:Update()
    if not self.PrimaryPart then return self:Remove() end
    local comps = self.Components
    local color = self.Color or (self.ColorDynamic and self:ColorDynamic()) or ESP:GetColor(self.Object) or ESP.Color

    local allow = true
    if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then allow = false end
    if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then allow = false end
    if self.Player and not ESP.Players then allow = false end
    if self.IsEnabled then
        allow = type(self.IsEnabled) == "string" and ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and self:IsEnabled()
    end
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then allow = false end

    if not allow then
        for _, v in pairs(comps) do
            v.Visible = false
        end
        return
    end

    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.p, Camera.CFrame.p)
    end

    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, size.Y / 2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, size.Y / 2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, -size.Y / 2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, -size.Y / 2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y / 2, 0),
        Torso = cf * ESP.BoxShift
    }

    -- Boxes
    if ESP.Boxes then
        local TL, V1 = WorldToViewportPoint(Camera, locs.TopLeft.p)
        local TR, V2 = WorldToViewportPoint(Camera, locs.TopRight.p)
        local BL, V3 = WorldToViewportPoint(Camera, locs.BottomLeft.p)
        local BR, V4 = WorldToViewportPoint(Camera, locs.BottomRight.p)

        comps.Quad.Visible = V1 or V2 or V3 or V4
        if comps.Quad.Visible then
            comps.Quad.PointA = Vector2.new(TR.X, TR.Y)
            comps.Quad.PointB = Vector2.new(TL.X, TL.Y)
            comps.Quad.PointC = Vector2.new(BL.X, BL.Y)
            comps.Quad.PointD = Vector2.new(BR.X, BR.Y)
            comps.Quad.Color = color
        end
    else
        comps.Quad.Visible = false
    end

    -- Names & Distance
    if ESP.Names then
        local tagPos, visible = WorldToViewportPoint(Camera, locs.TagPos.p)
        comps.Name.Visible = visible
        comps.Distance.Visible = visible
        if visible then
            comps.Name.Position = Vector2.new(tagPos.X, tagPos.Y)
            comps.Name.Text = self.Name
            comps.Name.Color = color

            comps.Distance.Position = Vector2.new(tagPos.X, tagPos.Y + 14)
            comps.Distance.Text = math.floor((Camera.CFrame.p - cf.p).magnitude) .. "m"
            comps.Distance.Color = color
        end
    else
        comps.Name.Visible = false
        comps.Distance.Visible = false
    end

    -- Tracers
    if ESP.Tracers then
        local torsoPos, visible = WorldToViewportPoint(Camera, locs.Torso.p)
        comps.Tracer.Visible = visible
        if visible then
            comps.Tracer.From = Vector2.new(torsoPos.X, torsoPos.Y)
            comps.Tracer.To = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / ESP.AttachShift)
            comps.Tracer.Color = color
        else
            comps.Tracer.From = Vector2.new(0, 0)
            comps.Tracer.To = Vector2.new(0, 0)
        end
    else
        comps.Tracer.Visible = false
        comps.Tracer.From = Vector2.new(0, 0)
        comps.Tracer.To = Vector2.new(0, 0)
    end
end

--// Add new ESP object
function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then return end

    if self:GetBox(obj) then self:GetBox(obj):Remove() end

    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or Players:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart"),
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    box.Components.Quad = Draw("Quad", {
        Thickness = self.Thickness,
        Color = self.Color,
        Transparency = 1,
        Filled = false,
        Visible = false
    })

    box.Components.Name = Draw("Text", {
        Center = true,
        Outline = true,
        Size = 19,
        Visible = false
    })

    box.Components.Distance = Draw("Text", {
        Center = true,
        Outline = true,
        Size = 19,
        Visible = false
    })

    box.Components.Tracer = Draw("Line", {
        Thickness = self.Thickness,
        Transparency = 1,
        Visible = false
    })

    self.Objects[obj] = box

    obj.AncestryChanged:Connect(function(_, parent)
        if not parent and self.AutoRemove then box:Remove() end
    end)

    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            if self.AutoRemove then box:Remove() end
        end)
    end

    return box
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

--// Enable if any feature is on
local function UpdateEnabledState()
    ESP.Enabled = ESP.Boxes or ESP.Names or ESP.Tracers
end

--// Character added
local function CharAdded(char)
    local p = Players:GetPlayerFromCharacter(char)
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then
        char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                ESP:Add(char, { Name = p.Name, Player = p, PrimaryPart = c })
            end
        end)
    else
        ESP:Add(char, { Name = p.Name, Player = p, PrimaryPart = root })
    end
end

local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then CharAdded(p.Character) end
end

--// Initialization
for _, p in pairs(Players:GetPlayers()) do
    if p ~= Player then PlayerAdded(p) end
end
Players.PlayerAdded:Connect(PlayerAdded)

--// Main loop
RunService.RenderStepped:Connect(function()
    Camera = workspace.CurrentCamera
    UpdateEnabledState()
    if not ESP.Enabled then return end

    for _, v in pairs(ESP.Objects) do
        if v.Update then
            local success, err = pcall(function() v:Update() end)
            if not success then warn("[ESP Error]", err) end
        end
    end
end)

return ESP
