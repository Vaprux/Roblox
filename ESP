-- Settings
local ESP = {
    Boxes = false,
    Names = false,
    Tracers = false,
    Enabled = false,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    TeamColor = true,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = false,
    Players = false,
    Objects = setmetatable({}, { __mode = "kv" }),
    Overrides = {}
}

-- Services
local Players, RunService, Player, Camera = game:GetService("Players"), game:GetService("RunService"), game.Players.LocalPlayer, workspace.CurrentCamera

-- Drawing helper
local function Draw(obj, props)
    local new = Drawing.new(obj)
    for i, v in pairs(props or {}) do new[i] = v end
    return new
end

-- ESP helpers
local function GetColor(obj)
    return ESP.Overrides.GetColor and ESP.Overrides.GetColor(obj) or ESP.Color
end

local function IsTeamMate(p) return ESP.Overrides.IsTeamMate and ESP.Overrides.IsTeamMate(p) or p.Team == Player.Team end

local function GetPlrFromChar(char) return ESP.Overrides.GetPlrFromChar and ESP.Overrides.GetPlrFromChar(char) or Players:GetPlayerFromCharacter(char) end

-- Update visibility based on conditions
local function UpdateBoxVisibility(box)
    local cf = box.PrimaryPart.CFrame
    local size, color = box.Size, box.Color or GetColor(box.Object)
    local locs = { TopLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, size.Y / 2, 0), 
                   TopRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, size.Y / 2, 0),
                   BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X / 2, -size.Y / 2, 0), 
                   BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X / 2, -size.Y / 2, 0), 
                   TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y / 2, 0) }

    if ESP.Boxes and box.Components.Quad then
        local points = { Camera:WorldToViewportPoint(locs.TopRight.p), Camera:WorldToViewportPoint(locs.TopLeft.p), Camera:WorldToViewportPoint(locs.BottomLeft.p), Camera:WorldToViewportPoint(locs.BottomRight.p) }
        box.Components.Quad.Visible = points[1] or points[2] or points[3] or points[4]
        if box.Components.Quad.Visible then
            for i = 1, 4 do box.Components.Quad["Point" .. string.char(64 + i)] = Vector2.new(points[i].X, points[i].Y) end
            box.Components.Quad.Color = color
        end
    elseif box.Components.Quad then box.Components.Quad.Visible = false end

    if ESP.Names and box.Components.Name then
        local pos, vis = Camera:WorldToViewportPoint(locs.TagPos.p)
        box.Components.Name.Visible = vis
        if vis then box.Components.Name.Position = Vector2.new(pos.X, pos.Y) box.Components.Name.Text = box.Name box.Components.Name.Color = color end
    end

    if ESP.Tracers and box.Components.Tracer then
        local torsoPos, vis = Camera:WorldToViewportPoint(locs.TagPos.p)
        box.Components.Tracer.Visible = vis
        if vis then box.Components.Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / ESP.AttachShift) box.Components.Tracer.To = Vector2.new(torsoPos.X, torsoPos.Y) box.Components.Tracer.Color = color end
    end
end

function ESP:Toggle(bool)
    self.Enabled = bool and (self.Boxes or self.Names or self.Tracers)
    if not self.Enabled then for _, v in pairs(self.Objects) do for _, comp in pairs(v.Components) do comp.Visible = false end end end
end

-- Box creation and removal
function ESP:Add(obj, options)
    if not obj.Parent then return end
    local box = setmetatable({ Name = options.Name or obj.Name, Type = "Box", Color = options.Color or ESP.Color, Size = options.Size or ESP.BoxSize, Object = obj, PrimaryPart = options.PrimaryPart or obj:FindFirstChild("HumanoidRootPart"), Components = {} }, { __index = { Remove = function(self) for _, v in pairs(self.Components) do if v then v:Remove() end end end, Update = UpdateBoxVisibility } })
    box.Components.Quad, box.Components.Name, box.Components.Tracer = Draw("Quad", { Thickness = ESP.Thickness, Color = box.Color, Transparency = 1, Filled = false, Visible = false }), Draw("Text", { Text = box.Name, Color = box.Color, Center = true, Outline = true, Size = 19, Visible = false }), Draw("Line", { Thickness = ESP.Thickness, Color = box.Color, Transparency = 1, Visible = false })
    self.Objects[obj] = box

    obj.AncestryChanged:Connect(function(_, parent) if not parent then box:Remove() end end)
    obj:GetPropertyChangedSignal("Parent"):Connect(function() if not obj.Parent then box:Remove() end end)
    obj:FindFirstChildOfClass("Humanoid")?.Died:Connect(function() box:Remove() end)

    return box
end

-- Player listeners
Players.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function(char)
        local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 5)
        if hrp then ESP:Add(char, { Name = p.Name, Player = p, PrimaryPart = hrp }) end
    end)
end)

-- Main render loop
RunService.RenderStepped:Connect(function()
    if not ESP.Boxes and not ESP.Names and not ESP.Tracers then return end
    for _, box in pairs(ESP.Objects) do pcall(box.Update, box) end
end)

return ESP
