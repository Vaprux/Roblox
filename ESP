-- Optimized ESP Script with Proper Loop Disconnects and Visibility Handling

local ESP = {
    Boxes = false,
    BoxShift = CFrame.new(0,-1.5,0),
    BoxSize = Vector3.new(4,6,0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Names = false,
    Tracers = false,
    TeamColor = true,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = false,
    Players = true,
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {}
}

function ESP:IsEnabled()
    return self.Boxes or self.Names or self.Tracers
end

function ESP:HideAll()
    for _, box in pairs(self.Objects) do
        for _, component in pairs(box.Components) do
            component.Visible = false
        end
    end
end

function ESP:UpdateVisibility()
    if not self:IsEnabled() then
        self:HideAll()
    end
end

-- Dependencies
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer

local function Draw(obj, props)
    local new = Drawing.new(obj)
    for i,v in pairs(props or {}) do
        new[i] = v
    end
    return new
end

-- Team + Color logic
function ESP:GetTeam(p)
    return self.Overrides.GetTeam and self.Overrides.GetTeam(p) or (p and p.Team)
end

function ESP:IsTeamMate(p)
    return self.Overrides.IsTeamMate and self.Overrides.IsTeamMate(p) or (self:GetTeam(p) == self:GetTeam(plr))
end

function ESP:GetColor(obj)
    if self.Overrides.GetColor then return self.Overrides.GetColor(obj) end
    local p = self:GetPlrFromChar(obj)
    return (p and self.TeamColor and p.Team and p.Team.TeamColor.Color) or self.Color
end

function ESP:GetPlrFromChar(char)
    return self.Overrides.GetPlrFromChar and self.Overrides.GetPlrFromChar(char) or plrs:GetPlayerFromCharacter(char)
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

-- Box object template
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i,v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:Update()
    if not self.PrimaryPart then return self:Remove() end
    
    local allow = true
    if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then allow = false end
    if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then allow = false end
    if self.Player and not ESP.Players then allow = false end
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or type(self.IsEnabled) == "function" and not self:IsEnabled()) then allow = false end
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then allow = false end

    if not allow then return self:Hide() end

    local cf = ESP.FaceCamera and CFrame.new(self.PrimaryPart.Position, cam.CFrame.Position) or self.PrimaryPart.CFrame
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,size.Y/2,0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,size.Y/2,0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2,-size.Y/2,0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2,-size.Y/2,0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0,size.Y/2,0),
        Torso = cf * ESP.BoxShift
    }

    local color = ESP.Highlighted == self.Object and ESP.HighlightColor or self.Color or self.ColorDynamic and self:ColorDynamic() or ESP:GetColor(self.Object) or ESP.Color

    local function vis(p)
        local screen, visible = cam:WorldToViewportPoint(p)
        return screen, visible
    end

    -- Update visuals
    local tl, v1 = vis(locs.TopLeft.Position)
    local tr, v2 = vis(locs.TopRight.Position)
    local bl, v3 = vis(locs.BottomLeft.Position)
    local br, v4 = vis(locs.BottomRight.Position)

    if self.Components.Quad then
        if v1 or v2 or v3 or v4 then
            self.Components.Quad.Visible = true
            self.Components.Quad.PointA = Vector2.new(tr.X, tr.Y)
            self.Components.Quad.PointB = Vector2.new(tl.X, tl.Y)
            self.Components.Quad.PointC = Vector2.new(bl.X, bl.Y)
            self.Components.Quad.PointD = Vector2.new(br.X, br.Y)
            self.Components.Quad.Color = color
        else
            self.Components.Quad.Visible = false
        end
    end

    if ESP.Names then
        local tag, tagVisible = vis(locs.TagPos.Position)
        if tagVisible then
            self.Components.Name.Visible = true
            self.Components.Name.Position = Vector2.new(tag.X, tag.Y)
            self.Components.Name.Text = self.Name
            self.Components.Name.Color = color

            self.Components.Distance.Visible = true
            self.Components.Distance.Position = Vector2.new(tag.X, tag.Y + 14)
            self.Components.Distance.Text = math.floor((cam.CFrame.Position - cf.Position).Magnitude) .. "m away"
            self.Components.Distance.Color = color
        else
            self.Components.Name.Visible = false
            self.Components.Distance.Visible = false
        end
    else
        self.Components.Name.Visible = false
        self.Components.Distance.Visible = false
    end

    if ESP.Tracers then
        local torso, torsoVisible = vis(locs.Torso.Position)
        if torsoVisible then
            self.Components.Tracer.Visible = true
            self.Components.Tracer.From = Vector2.new(torso.X, torso.Y)
            self.Components.Tracer.To = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/ESP.AttachShift)
            self.Components.Tracer.Color = color
        else
            self.Components.Tracer.Visible = false
        end
    else
        self.Components.Tracer.Visible = false
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then return warn(obj, "has no parent") end

    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or plrs:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or obj:FindFirstChild("HumanoidRootPart"),
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    box.Components.Quad = Draw("Quad", {Thickness=self.Thickness, Color=box.Color, Transparency=1, Filled=false, Visible=false})
    box.Components.Name = Draw("Text", {Text=box.Name, Color=box.Color, Center=true, Outline=true, Size=19, Visible=false})
    box.Components.Distance = Draw("Text", {Color=box.Color, Center=true, Outline=true, Size=19, Visible=false})
    box.Components.Tracer = Draw("Line", {Thickness=self.Thickness, Color=box.Color, Transparency=1, Visible=false})

    self.Objects[obj] = box

    obj.AncestryChanged:Connect(function(_, parent)
        if not parent and ESP.AutoRemove ~= false then box:Remove() end
    end)
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if not obj.Parent and ESP.AutoRemove ~= false then box:Remove() end
    end)

    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            if ESP.AutoRemove ~= false then box:Remove() end
        end)
    end

    return box
end

local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    local root = char:FindFirstChild("HumanoidRootPart")
    if root then
        ESP:Add(char, {Name=p.Name, Player=p, PrimaryPart=root})
    else
        local con
        con = char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                con:Disconnect()
                ESP:Add(char, {Name=p.Name, Player=p, PrimaryPart=c})
            end
        end)
    end
end

local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then CharAdded(p.Character) end
end

plrs.PlayerAdded:Connect(PlayerAdded)
for _, p in pairs(plrs:GetPlayers()) do
    if p ~= plr then PlayerAdded(p) end
end

-- Optimized Render Loop
local rs = game:GetService("RunService")
rs.RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    if not ESP:IsEnabled() then return end
    for _, box in pairs(ESP.Objects) do
        if box.Update then
            local ok, err = pcall(box.Update, box)
            if not ok then warn("[ESP Update Error]", err) end
        end
    end
end)

return ESP
