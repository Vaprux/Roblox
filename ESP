if _G.__ESP_MODULE_LOADED then return _G.__ESP_INSTANCE end
_G.__ESP_MODULE_LOADED = true

local ESP = {
    Boxes = false,
    BoxShift = CFrame.new(0,-1.5,0),
    BoxSize = Vector3.new(4,6,0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Names = false,
    Tracers = false,
    TeamColor = true,
    Thickness = 2,
    AttachShift = 1,
    TeamMates = false,
    Players = true,

    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    _RenderConnection = nil
}

function ESP:IsEnabled()
    return self.Boxes or self.Names or self.Tracers
end

function ESP:UpdateESPState()
    task.delay(0.1, function()
        if not self:IsEnabled() then
            for _, v in pairs(self.Objects) do
                for _, component in pairs(v.Components) do
                    component.Visible = false
                end
            end
            if self._RenderConnection then
                self._RenderConnection:Disconnect()
                self._RenderConnection = nil
            end
        else
            self:StartRenderLoop()
        end
    end)
end

function ESP:StartRenderLoop()
    if self._RenderConnection then return end
    self._RenderConnection = game:GetService("RunService").RenderStepped:Connect(function()
        if not self:IsEnabled() then return end
        cam = workspace.CurrentCamera
        for _, v in pairs(self.Objects) do
            if v.Update then
                local s,e = pcall(v.Update, v)
                if not s then warn("[EU]", e, v.Object:GetFullName()) end
            end
        end
    end)
end

setmetatable(ESP, {
    __newindex = function(t, k, v)
        rawset(t, k, v)
        if k == "Boxes" or k == "Names" or k == "Tracers" then
            t:UpdateESPState()
        end
    end
})

-- Declarations --
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer

local V3new = Vector3.new
local WorldToViewportPoint = cam.WorldToViewportPoint

-- Drawing Utility --
local function Draw(obj, props)
    local new = Drawing.new(obj)
    props = props or {}
    for i,v in pairs(props) do
        new[i] = v
    end
    return new
end

-- Helper Functions --
function ESP:GetTeam(p)
    return self.Overrides.GetTeam and self.Overrides.GetTeam(p) or p and p.Team
end

function ESP:IsTeamMate(p)
    return self.Overrides.IsTeamMate and self.Overrides.IsTeamMate(p) or self:GetTeam(p) == self:GetTeam(plr)
end

function ESP:GetColor(obj)
    if self.Overrides.GetColor then return self.Overrides.GetColor(obj) end
    local p = self:GetPlrFromChar(obj)
    return p and self.TeamColor and p.Team and p.Team.TeamColor.Color or self.Color
end

function ESP:GetPlrFromChar(char)
    return self.Overrides.GetPlrFromChar and self.Overrides.GetPlrFromChar(char) or plrs:GetPlayerFromCharacter(char)
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:AddObjectListener(parent, options)
    local function NewListener(c)
        if (type(options.Type) == "string" and not c:IsA(options.Type)) then return end
        if (type(options.Name) == "string" and c.Name ~= options.Name) then return end
        if options.Validator and not options.Validator(c) then return end

        local box = ESP:Add(c, {
            PrimaryPart = type(options.PrimaryPart) == "string" and c:WaitForChild(options.PrimaryPart) or type(options.PrimaryPart) == "function" and options.PrimaryPart(c),
            Color = type(options.Color) == "function" and options.Color(c) or options.Color,
            ColorDynamic = options.ColorDynamic,
            Name = type(options.CustomName) == "function" and options.CustomName(c) or options.CustomName,
            IsEnabled = options.IsEnabled,
            RenderInNil = options.RenderInNil
        })

        if options.OnAdded then coroutine.wrap(options.OnAdded)(box) end
    end

    if options.Recursive then
        parent.DescendantAdded:Connect(NewListener)
        for _,v in pairs(parent:GetDescendants()) do coroutine.wrap(NewListener)(v) end
    else
        parent.ChildAdded:Connect(NewListener)
        for _,v in pairs(parent:GetChildren()) do coroutine.wrap(NewListener)(v) end
    end
end

local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for _, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
    end
    self.Components = nil
    if self._cleanup then
        for _, c in ipairs(self._cleanup) do
            pcall(function() c:Disconnect() end)
        end
        self._cleanup = nil
    end
end

function boxBase:Update()
    if not self.PrimaryPart then return self:Remove() end

    local color = ESP.Highlighted == self.Object and ESP.HighlightColor or self.Color or self.ColorDynamic and self:ColorDynamic() or ESP:GetColor(self.Object) or ESP.Color
    local allow = true

    if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then allow = false end
    if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then allow = false end
    if self.Player and not ESP.Players then allow = false end
    if self.IsEnabled and ((type(self.IsEnabled) == "string" and not ESP[self.IsEnabled]) or (type(self.IsEnabled) == "function" and not self:IsEnabled())) then allow = false end
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then allow = false end

    if not allow then
        for _, v in pairs(self.Components) do v.Visible = false end
        return
    end

    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then cf = CFrame.new(cf.p, cam.CFrame.p) end

    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, size.Y/2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, size.Y/2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, -size.Y/2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, -size.Y/2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y/2, 0),
        Torso = cf * ESP.BoxShift
    }

    -- Quad
    if ESP.Boxes then
        local A, VisA = WorldToViewportPoint(cam, locs.TopRight.p)
        local B, VisB = WorldToViewportPoint(cam, locs.TopLeft.p)
        local C, VisC = WorldToViewportPoint(cam, locs.BottomLeft.p)
        local D, VisD = WorldToViewportPoint(cam, locs.BottomRight.p)
        if VisA or VisB or VisC or VisD then
            local quad = self.Components.Quad
            quad.Visible = true
            quad.PointA, quad.PointB, quad.PointC, quad.PointD = Vector2.new(A.X,A.Y), Vector2.new(B.X,B.Y), Vector2.new(C.X,C.Y), Vector2.new(D.X,D.Y)
            quad.Color = color
        else
            self.Components.Quad.Visible = false
        end
    else
        self.Components.Quad.Visible = false
    end

    -- Names + Distance
    if ESP.Names then
        local tag, vis = WorldToViewportPoint(cam, locs.TagPos.p)
        if vis then
            self.Components.Name.Visible = true
            self.Components.Name.Position = Vector2.new(tag.X, tag.Y)
            self.Components.Name.Text = self.Name
            self.Components.Name.Color = color

            self.Components.Distance.Visible = true
            self.Components.Distance.Position = Vector2.new(tag.X, tag.Y + 14)
            self.Components.Distance.Text = math.floor((cam.CFrame.p - cf.p).magnitude) .. "m away"
            self.Components.Distance.Color = color
        else
            self.Components.Name.Visible = false
            self.Components.Distance.Visible = false
        end
    else
        self.Components.Name.Visible = false
        self.Components.Distance.Visible = false
    end

    -- Tracers
    if ESP.Tracers then
        local torsoPos, vis = WorldToViewportPoint(cam, locs.Torso.p)
        if vis then
            local tracer = self.Components.Tracer
            tracer.Visible = true
            tracer.From = Vector2.new(torsoPos.X, torsoPos.Y)
            tracer.To = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y / ESP.AttachShift)
            tracer.Color = color
        else
            self.Components.Tracer.Visible = false
        end
    else
        self.Components.Tracer.Visible = false
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or plrs:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or (obj:IsA("Model") and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart"))) or (obj:IsA("BasePart") and obj),
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then self:GetBox(obj):Remove() end

    box.Components["Quad"] = Draw("Quad", { Thickness = self.Thickness, Transparency = 1, Filled = false })
    box.Components["Name"] = Draw("Text", { Center = true, Outline = true, Size = 19 })
    box.Components["Distance"] = Draw("Text", { Center = true, Outline = true, Size = 19 })
    box.Components["Tracer"] = Draw("Line", { Thickness = self.Thickness, Transparency = 1 })

    self.Objects[obj] = box

    -- Clean-up
    box._cleanup = {}
    table.insert(box._cleanup, obj.AncestryChanged:Connect(function(_, parent) if not parent and ESP.AutoRemove ~= false then box:Remove() end end))
    table.insert(box._cleanup, obj:GetPropertyChangedSignal("Parent"):Connect(function() if not obj.Parent and ESP.AutoRemove ~= false then box:Remove() end end))
    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        table.insert(box._cleanup, hum.Died:Connect(function() if ESP.AutoRemove ~= false then box:Remove() end end))
    end

    return box
end

local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    if not char:FindFirstChild("HumanoidRootPart") then
        local ev
        ev = char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                ev:Disconnect()
                ESP:Add(char, {
                    Name = p.Name,
                    Player = p,
                    PrimaryPart = c
                })
            end
        end)
    else
        ESP:Add(char, {
            Name = p.Name,
            Player = p,
            PrimaryPart = char.HumanoidRootPart
        })
    end
end

local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then coroutine.wrap(CharAdded)(p.Character) end
end

plrs.PlayerAdded:Connect(PlayerAdded)
for _,v in pairs(plrs:GetPlayers()) do
    if v ~= plr then PlayerAdded(v) end
end

_G.__ESP_INSTANCE = ESP
return ESP
