-- Destroy previous notification area if it exists
if game:GetService("CoreGui"):FindFirstChild("NotificationArea") then
    game:GetService("CoreGui"):FindFirstChild("NotificationArea"):Destroy()
end

-- Module and services
local NotificationModule = {}
local TextService = game:GetService('TextService')
local CoreGui = game:GetService('CoreGui')

-- Colors
local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(20, 20, 20)
local OutlineColor = Color3.fromRGB(50, 50, 50)

-- Helper function to create instances
local function Create(Class, Properties)
    local _Instance = Instance.new(Class)
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance
end

-- Function to get text size bounds
local function GetTextBounds(Text, Font, Size, Resolution)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
    return Bounds.X, Bounds.Y
end

-- Create Notification Area
local NotificationArea = Create('ScreenGui', {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

-- Create Notification Container
local NotificationContainer = Create('Frame', {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 400),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

-- Layout for notifications
Create('UIListLayout', {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

-- Notify function to create notifications
function NotificationModule:Notify(Text, Color, Time)
    local TextSize = 17
    local XSize, YSize = GetTextBounds(Text, Enum.Font.Arial, TextSize)
    YSize = YSize + 7 -- Add padding for text

    -- Outer Frame for the notification
    local NotifyOuter = Create('Frame', {
        BorderColor3 = Color3.new(0, 0, 0),
        Position = UDim2.new(0.5, -XSize / 2, 0, 10),
        Size = UDim2.new(0, 0, 0, YSize),
        ClipsDescendants = true,
        ZIndex = 100,
        BackgroundTransparency = 1,
        Parent = NotificationContainer,
    })

    -- Inner Frame for the notification
    local NotifyInner = Create('Frame', {
        BackgroundColor3 = MainColor,
        BorderColor3 = OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 101,
        Parent = NotifyOuter,
    })

    -- White inner frame for gradient effect
    local InnerFrame = Create('Frame', {
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 1, 0, 1),
        Size = UDim2.new(1, -2, 1, -2),
        ZIndex = 102,
        Parent = NotifyInner,
    })

    -- Gradient effect
    Create('UIGradient', {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, MainColor:lerp(Color3.new(0, 0, 0), 0.3)),
            ColorSequenceKeypoint.new(1, MainColor),
        }),
        Rotation = -90,
        Parent = InnerFrame,
    })

    -- Text label inside the notification
    Create('TextLabel', {
        Position = UDim2.new(0, 4, 0, 0),
        Size = UDim2.new(1, -4, 1, 0),
        Text = Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Arial,
        TextSize = TextSize,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        ZIndex = 103,
        Parent = InnerFrame,
    })

    -- Enhanced accent bar with increased saturation for the 'Color'
    Create('Frame', {
        BackgroundColor3 = Color:lerp(Color3.fromRGB(255, 0, 0), 0.3),  -- Lerp to make it more vibrant
        BorderSizePixel = 0,
        Position = UDim2.new(0, -1, 0, -1),
        Size = UDim2.new(0, 6, 1, 2),  -- Thicker accent
        ZIndex = 104,
        Parent = NotifyOuter,
    })

    -- Glow effect (outer glow around the Color bar for more prominence)
    Create('Frame', {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = UDim2.new(0, -4, 0, -4),
        Size = UDim2.new(0, 14, 1, 6),
        ZIndex = 105,
        Parent = NotifyOuter,
        BackgroundTransparency = 0.8,
        CornerRadius = UDim.new(0, 8),
    })

    -- Tween notification size and animation
    NotifyOuter:TweenSize(UDim2.new(0, XSize + 8 + 4, 0, YSize), 'Out', 'Quad', 0.4, true)

    -- Auto-remove notification after a set time
    task.spawn(function()
        wait(Time or 5)
        NotifyOuter:TweenSize(UDim2.new(0, 0, 0, YSize), 'Out', 'Quad', 0.4, true)
        wait(0.4)
        NotifyOuter:Destroy()
    end)
end

return NotificationModule
