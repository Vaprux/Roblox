-- NotifyLogger Module (with Command Bar & Autocomplete)
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")

if _G.__NOTIFYLOGGER_LOADED then
    return _G.__NOTIFYLOGGER_INSTANCE
end
_G.__NOTIFYLOGGER_LOADED = true

-- Clean previous UIs
if CoreGui:FindFirstChild("NotificationArea") then CoreGui.NotificationArea:Destroy() end
if CoreGui:FindFirstChild("LoggerGUI") then CoreGui.LoggerGUI:Destroy() end

local NotifyLogger = {}

-- GUI Colors
local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

-- === Utilities ===
local function Create(Class, Properties)
    local Inst = Instance.new(Class)
    for Prop, Val in pairs(Properties) do
        Inst[Prop] = Val
    end
    return Inst
end

local function StripTags(str)
    return string.gsub(str, "<[^>]->", "")
end

local function GetTextSize(Text, Font, Size)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Vector2.new(1920, 1080))
    return Bounds.X or 200, Bounds.Y or 50
end

-- === Notification System ===
local ActiveNotifications = {}
local NotificationTimers = {}

local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 370),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

-- === Logger System ===
local LoggerGUI = Create("ScreenGui", {
    Name = "LoggerGUI",
    Parent = CoreGui,
    ResetOnSpawn = false,
    Enabled = true
})

local LoggerFrame = Create("Frame", {
    Size = UDim2.new(0, 300, 0, 220),
    Position = UDim2.new(1, -310, 1, -230),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.2,
    Name = "LoggerFrame",
    Parent = LoggerGUI
})

local Header = Create("TextButton", {
    Size = UDim2.new(1, 0, 0, 24),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "▼ Logger (Click to Minimize)",
    Font = Enum.Font.SourceSansBold,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    AutoButtonColor = false,
    Parent = LoggerFrame
})

local ScrollingFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -6, 1, -60),
    Position = UDim2.new(0, 0, 0, 24),
    CanvasSize = UDim2.new(0, 0, 10, 0),
    ScrollBarThickness = 6,
    BackgroundTransparency = 1,
    Name = "LogScroll",
    Parent = LoggerFrame
})

local UIListLayout = Create("UIListLayout", {
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = ScrollingFrame
})

local CommandBar = Create("TextBox", {
    Size = UDim2.new(1, -10, 0, 24),
    Position = UDim2.new(0, 5, 1, -28),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "",
    PlaceholderText = "Enter command...",
    Font = Enum.Font.SourceSans,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    ClearTextOnFocus = false,
    BorderSizePixel = 0,
    Parent = LoggerFrame
})

local SuggestionLabel = Create("TextLabel", {
    Size = UDim2.new(1, -10, 0, 18),
    Position = UDim2.new(0, 5, 1, -50),
    BackgroundTransparency = 1,
    Font = Enum.Font.SourceSansItalic,
    TextSize = 14,
    TextColor3 = Color3.fromRGB(180, 180, 180),
    Text = "",
    Visible = false,
    Parent = LoggerFrame
})

local ResizeHandle = Create("TextButton", {
    Size = UDim2.new(0, 16, 0, 16),
    Position = UDim2.new(1, -16, 1, -16),
    BackgroundTransparency = 1,
    Text = "◢",
    TextColor3 = Color3.fromRGB(150, 150, 150),
    Font = Enum.Font.SourceSansBold,
    TextSize = 14,
    ZIndex = 10,
    Name = "ResizeHandle",
    Parent = LoggerFrame
})

-- Resize logic
local resizing, dragStart, startSize = false, nil, nil
ResizeHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = true
        dragStart = Vector2.new(input.Position.X, input.Position.Y)
        startSize = LoggerFrame.AbsoluteSize
    end
end)
ResizeHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        resizing = false
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = Vector2.new(input.Position.X, input.Position.Y)
        local delta = mousePos - dragStart
        LoggerFrame.Size = UDim2.new(0, math.max(200, startSize.X + delta.X), 0, math.max(100, startSize.Y + delta.Y))
    end
end)

-- Dragging logic
local dragging, dragOffset = false, nil
Header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragOffset = Vector2.new(input.Position.X - LoggerFrame.AbsolutePosition.X, input.Position.Y - LoggerFrame.AbsolutePosition.Y)
    end
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local newPos = Vector2.new(input.Position.X, input.Position.Y) - dragOffset
        LoggerFrame.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
    end
end)

-- Logger
local logEntries = {}
local isMinimized = false
Header.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
    ScrollingFrame.Visible = not isMinimized
    CommandBar.Visible = not isMinimized
    SuggestionLabel.Visible = not isMinimized
end)

function NotifyLogger.Log(text)
    local rawText = tostring(text)
    local label = Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 20),
        BackgroundTransparency = 1,
        Text = rawText,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true,
        AutoButtonColor = false,
        Parent = ScrollingFrame
    })
    label.MouseButton1Click:Connect(function()
        if setclipboard then
            setclipboard(StripTags(rawText))
            NotifyLogger.Notify("Copied to clipboard!", Color3.fromRGB(80, 200, 80), 2)
        end
    end)
    table.insert(logEntries, label)
    task.wait()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function NotifyLogger.Clear()
    for _, label in ipairs(logEntries) do
        label:Destroy()
    end
    logEntries = {}
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function NotifyLogger.Show(state)
    LoggerGUI.Enabled = state
end

-- Notifications
function NotifyLogger.Notify(text, color, time)
    local clean = StripTags(text or "")
    local xSize, ySize = GetTextSize(clean, Enum.Font.GothamBold, 17)
    ySize = ySize + 10

    local frame = Create("Frame", {
        BackgroundColor3 = MainColor,
        BorderColor3 = OutlineColor,
        BorderMode = Enum.BorderMode.Inset,
        Position = UDim2.new(0.5, -xSize / 2, 0, 10),
        Size = UDim2.new(0, 0, 0, ySize),
        ClipsDescendants = true,
        ZIndex = 101,
        Parent = NotificationContainer,
    })

    Create("TextLabel", {
        Position = UDim2.new(0, 6, 0, 0),
        Size = UDim2.new(1, -6, 1, 0),
        Text = text,
        Font = Enum.Font.GothamBold,
        TextSize = 17,
        BackgroundTransparency = 1,
        TextColor3 = Color3.new(1, 1, 1),
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 102,
        RichText = true,
        Parent = frame,
    })

    Create("Frame", {
        Name = "AccentBar",
        BackgroundColor3 = color or AccentColor,
        Size = UDim2.new(0, 3, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 103,
        Parent = frame,
    })

    frame:TweenSize(UDim2.new(0, xSize + 14, 0, ySize), "Out", "Quad", 0.4, true)
    task.delay(time or 5, function()
        frame:TweenSize(UDim2.new(0, 0, 0, ySize), "Out", "Quad", 0.4, true)
        task.wait(0.4)
        frame:Destroy()
    end)

    NotifyLogger.Log(text)
end

-- Command System
local Commands = {}
function NotifyLogger.AddCommand(name, callback)
    Commands[name:lower()] = callback
end

CommandBar.FocusLost:Connect(function(enter)
    local text = CommandBar.Text
    if enter and text ~= "" then
        local cmd = text:lower()
        if Commands[cmd] then
            Commands[cmd]()
        else
            NotifyLogger.Notify("Unknown command: " .. cmd, Color3.fromRGB(200, 80, 80), 3)
        end
        CommandBar.Text = ""
        SuggestionLabel.Text = ""
    end
end)

CommandBar:GetPropertyChangedSignal("Text"):Connect(function()
    local input = CommandBar.Text:lower()
    local found = nil
    for name in pairs(Commands) do
        if name:sub(1, #input) == input and input ~= "" then
            found = name
            break
        end
    end
    if found then
        SuggestionLabel.Text = found
        SuggestionLabel.Visible = true
    else
        SuggestionLabel.Visible = false
    end
end)

_G.__NOTIFYLOGGER_INSTANCE = NotifyLogger
return NotifyLogger
