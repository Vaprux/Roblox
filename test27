-- NotifyLogger Module (Enhanced with Context Menu)
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")

if _G.__NOTIFYLOGGER_LOADED then
    return _G.__NOTIFYLOGGER_INSTANCE
end
_G.__NOTIFYLOGGER_LOADED = true

if CoreGui:FindFirstChild("NotificationArea") then CoreGui.NotificationArea:Destroy() end
if CoreGui:FindFirstChild("LoggerGUI") then CoreGui.LoggerGUI:Destroy() end

local NotifyLogger = {}
local AccentColor = Color3.fromRGB(75, 10, 120)
local MainColor = Color3.fromRGB(25, 25, 25)
local OutlineColor = Color3.fromRGB(50, 50, 50)

local function Create(Class, Properties)
    local Inst = Instance.new(Class)
    for Prop, Val in pairs(Properties) do
        Inst[Prop] = Val
    end
    return Inst
end

local function StripTags(str)
    return string.gsub(str, "<[^>]->", "")
end

local function GetTextSize(Text, Font, Size)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Vector2.new(1920, 1080))
    return Bounds.X or 200, Bounds.Y or 50
end

-- === GUI Setup ===
local NotificationArea = Create("ScreenGui", {
    Name = "NotificationArea",
    Parent = CoreGui,
    IgnoreGuiInset = true
})

local NotificationContainer = Create("Frame", {
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 370),
    Size = UDim2.new(1, 0, 1, -40),
    ZIndex = 100,
    Parent = NotificationArea
})

Create("UIListLayout", {
    Padding = UDim.new(0, 4),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = NotificationContainer,
})

local LoggerGUI = Create("ScreenGui", {
    Name = "LoggerGUI",
    Parent = CoreGui,
    ResetOnSpawn = false,
    Enabled = true
})

local LoggerFrame = Create("Frame", {
    Size = UDim2.new(0, 300, 0, 200),
    Position = UDim2.new(1, -310, 1, -210),
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    BackgroundTransparency = 0.2,
    Name = "LoggerFrame",
    Parent = LoggerGUI
})

local Header = Create("TextButton", {
    Size = UDim2.new(1, 0, 0, 24),
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    Text = "▼ Logger (Click to Minimize)",
    Font = Enum.Font.SourceSansBold,
    TextSize = 16,
    TextColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    AutoButtonColor = false,
    Parent = LoggerFrame
})

local ScrollingFrame = Create("ScrollingFrame", {
    Size = UDim2.new(1, -6, 1, -30),
    Position = UDim2.new(0, 0, 0, 24),
    CanvasSize = UDim2.new(0, 0, 10, 0),
    ScrollBarThickness = 6,
    BackgroundTransparency = 1,
    Name = "LogScroll",
    Parent = LoggerFrame
})

local UIListLayout = Create("UIListLayout", {
    SortOrder = Enum.SortOrder.LayoutOrder,
    Parent = ScrollingFrame
})

local ContextMenu = Create("Frame", {
    Name = "ContextMenu",
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BorderSizePixel = 0,
    Size = UDim2.new(0, 140, 0, 100),
    Visible = false,
    ZIndex = 200,
    Parent = LoggerGUI
})

local options = {"Copy Log", "Delete Log", "Clear All Logs", "Copy All Logs"}
local contextButtons = {}
for i, text in ipairs(options) do
    local btn = Create("TextButton", {
        Size = UDim2.new(1, 0, 0, 25),
        Position = UDim2.new(0, 0, 0, (i - 1) * 25),
        Text = text,
        BackgroundTransparency = 0.1,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        ZIndex = 201,
        Parent = ContextMenu
    })
    contextButtons[text] = btn
end

local logEntries = {}
local currentRightClickedLabel = nil
local isMinimized = false

Header.MouseButton1Up:Connect(function()
    isMinimized = not isMinimized
    Header.Text = isMinimized and "▶ Logger (Click to Expand)" or "▼ Logger (Click to Minimize)"
    ScrollingFrame.Visible = not isMinimized
end)

function NotifyLogger.Log(text)
    local cleanText = StripTags(text)
    local label = Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 20),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        RichText = true,
        AutoButtonColor = false,
        Parent = ScrollingFrame
    })
    table.insert(logEntries, label)

    label.MouseButton2Click:Connect(function()
        currentRightClickedLabel = label
        ContextMenu.Position = UDim2.new(0, UserInputService:GetMouseLocation().X, 0, UserInputService:GetMouseLocation().Y)
        ContextMenu.Visible = true
    end)

    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    ScrollingFrame.CanvasPosition = Vector2.new(0, ScrollingFrame.CanvasSize.Y.Offset)
end

function NotifyLogger.Clear()
    for _, label in ipairs(logEntries) do
        label:Destroy()
    end
    logEntries = {}
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end

function NotifyLogger.CopyAll()
    local allText = ""
    for _, label in ipairs(logEntries) do
        allText = allText .. StripTags(label.Text) .. "\n"
    end
    setclipboard(allText)
end

contextButtons["Copy Log"].MouseButton1Click:Connect(function()
    if currentRightClickedLabel then
        setclipboard(StripTags(currentRightClickedLabel.Text))
    end
    ContextMenu.Visible = false
end)

contextButtons["Delete Log"].MouseButton1Click:Connect(function()
    if currentRightClickedLabel then
        for i, label in ipairs(logEntries) do
            if label == currentRightClickedLabel then
                table.remove(logEntries, i)
                break
            end
        end
        currentRightClickedLabel:Destroy()
    end
    ContextMenu.Visible = false
end)

contextButtons["Clear All Logs"].MouseButton1Click:Connect(function()
    NotifyLogger.Clear()
    ContextMenu.Visible = false
end)

contextButtons["Copy All Logs"].MouseButton1Click:Connect(function()
    NotifyLogger.CopyAll()
    ContextMenu.Visible = false
end)

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        ContextMenu.Visible = false
    end
end)

function NotifyLogger.Show(state)
    LoggerGUI.Enabled = state
end

function NotifyLogger.Notify(Text, Color, Time)
    NotifyLogger.Log(Text)
end

_G.__NOTIFYLOGGER_INSTANCE = NotifyLogger
return NotifyLogger
