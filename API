if _G.QuantumLoggerRunning then return end
_G.QuantumLoggerRunning = true

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local userId = tostring(LocalPlayer.UserId)

local request = (syn and syn.request) or (http and http.request) or http_request or request
local websocketSupport = WebSocket or syn and syn.websocket or getgenv().WebSocket or WebSocketConnect
local wsUrl = "ws://localhost:3001"

local Client = _G.Client -- ‚úÖ Grab Client from global

if not Client then
	warn("[Quantum] Client not available. Logger disabled.")
	return
end

if not websocketSupport then
	warn("[Quantum] Your exploit does not support WebSocket.")
	return
end

print("[Quantum] Connecting to WebSocket command server...")

local ws = websocketSupport.connect(wsUrl)

if not ws then
	warn("[Quantum] Failed to connect to WebSocket.")
	return
end

-- üåê Identify to server
ws:Send(HttpService:JSONEncode({ userId = userId }))

print("[Quantum] Connected to WebSocket. Awaiting commands...")

-- üéØ Handle incoming commands
ws.OnMessage:Connect(function(msg)
	local success, data = pcall(function()
		return HttpService:JSONDecode(msg)
	end)

	if not success or not data or not data.command then
		warn("[Quantum] Failed to parse command:", msg)
		return
	end

	local cmd = data.command

	-- üì§ Optional logging to /log
	pcall(function()
		if request then
			request({
				Url = "http://localhost:3000/log",
				Method = "POST",
				Headers = {["Content-Type"] = "application/json"},
				Body = HttpService:JSONEncode({
					username = LocalPlayer.Name,
					userId = LocalPlayer.UserId,
					command = cmd
				})
			})
		end
	end)

	-- üß† Handle the command
	if cmd:sub(1, 5) == "Load:" then
		local name = cmd:sub(6)
		Client:LoadRemoteScript(name)
	else
		Client:SetFeature(cmd, true)
	end
end)

ws.OnClose:Connect(function()
	warn("[Quantum] WebSocket connection closed.")
end)

ws.OnError:Connect(function(err)
	warn("[Quantum] WebSocket error:", err)
end)
