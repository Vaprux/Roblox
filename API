if _G.QuantumLoggerRunning then return end
_G.QuantumLoggerRunning = true

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Client = _G.Client

if not Client then
    warn("[Quantum] Client not available. Logger disabled.")
    return
end

-- WebSocket Support
local WebSocket = syn and syn.websocket or WebSocket
if not WebSocket then
    warn("[Quantum] WebSocket not supported.")
    return
end

local socket
local connected = false

-- Auto-load scripts from localhost
function Client:LoadRemoteScript(name)
    local url = "http://localhost:3000/scripts/" .. name
    local response = game:HttpGet(url, true)
    local func, err = loadstring(response)
    if func then
        pcall(func)
        print("[Quantum] Loaded script:", name)
    else
        warn("[Quantum] Script error:", err)
    end
end

-- Connect to WebSocket server
local function connect()
    local userId = tostring(LocalPlayer.UserId)
    socket = WebSocket.connect("ws://localhost:3000/ws")

    socket.OnMessage:Connect(function(msg)
        if msg == "ping" then return end
        print("[Quantum] WS Command:", msg)

        if msg:sub(1, 5) == "Load:" then
            local scriptName = msg:sub(6)
            Client:LoadRemoteScript(scriptName)
        else
            Client:SetFeature(msg, true)
        end
    end)

    socket.OnClose:Connect(function()
        print("[Quantum] WebSocket disconnected.")
        connected = false
    end)

    socket.OnError:Connect(function(err)
        warn("[Quantum] WS Error:", err)
        connected = false
    end)

    task.wait(1)
    socket:Send(userId)
    connected = true
    print("[Quantum] WebSocket connected as", userId)
end

-- Auto-reconnect
task.spawn(function()
    while true do
        if not connected then
            pcall(connect)
        end
        task.wait(30)
    end
end)
