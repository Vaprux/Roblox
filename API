if _G.QuantumLoggerRunning then return end
_G.QuantumLoggerRunning = true

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local request = (syn and syn.request) or (http and http.request) or http_request or request

local commandUrl = "http://localhost:3000/commands/" .. LocalPlayer.UserId
print("[Quantum] Remote command handler initialized.")

-- ‚úÖ Declare Client first
local Client = {}

function Client:LoadRemoteScript(name)
	if not request then
		warn("[Quantum] HTTP request not available.")
		return
	end

	local response = request({
		Url = "http://localhost:3000/scripts/" .. name,
		Method = "GET"
	})

	if response and response.Body then
		local func, err = loadstring(response.Body)
		if func then
			func()
		else
			warn("[Quantum] Failed to load remote script:", err)
		end
	else
		warn("[Quantum] Failed to retrieve remote script.")
	end
end

function Client:SetFeature(cmd, state)
	print("[Quantum] Toggled feature:", cmd, "State:", state)
end

-- üîÅ Command loop
task.spawn(function()
	while true do
		local success, response = pcall(function()
			return request({
				Url = commandUrl,
				Method = "GET"
			})
		end)

		if success and response and response.Body then
			local data = HttpService:JSONDecode(response.Body)
			if data and data.command then
				local cmd = data.command
				if cmd:sub(1, 5) == "Load:" then
					Client:LoadRemoteScript(cmd:sub(6))
				else
					Client:SetFeature(cmd, true)
				end
			end
		else
			warn("[Quantum] Failed to get command.")
		end

		task.wait(5)
	end
end)
