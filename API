if _G.QuantumLoggerRunning then return end
_G.QuantumLoggerRunning = true

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Client = _G.Client

if not Client then
	warn("[Quantum] Client not available. Logger disabled.")
	return
end

local WebSocket = WebSocket or WebSocketClient or (websocket and websocket.WebSocket)
if not WebSocket then
	warn("[Quantum] WebSocket not supported.")
	return
end

local ws = WebSocket.connect("ws://localhost:3000")
print("[Quantum] Connected to WebSocket API")

ws.OnMessage:Connect(function(msg)
	local success, data = pcall(function()
		return HttpService:JSONDecode(msg)
	end)

	if success and data and data.command then
		local cmd = data.command

		pcall(function()
			-- Optional: Log locally
			print("[Quantum] Received command:", cmd)
		end)

		if cmd:sub(1, 5) == "Load:" then
			local scriptName = cmd:sub(6)
			local response = syn.request({
				Url = "http://localhost:3000/scripts/" .. scriptName,
				Method = "GET"
			})
			if response and response.Body then
				local func, err = loadstring(response.Body)
				if func then pcall(func)
				else warn("[Quantum] Error in LoadRemoteScript:", err) end
			end
		else
			Client:SetFeature(cmd, true)
		end
	end
end)

-- Send userId handshake
ws:Send(HttpService:JSONEncode({ userId = LocalPlayer.UserId }))
